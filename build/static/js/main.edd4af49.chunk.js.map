{"version":3,"sources":["components/NavBar.js","actions/ProjectTaskActions.js","actions/types.js","components/ProjectTaskItem.js","components/ProjectTasks.js","components/AddProjectTask.js","reducers/errorsReducer.js","reducers/ProjectTaskReducer.js","reducers/index.js","redux/store.js","components/UpdateProjectTask.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","type","data-toggle","data-target","Component","addProjectTaskAction","project_task","history","dispatch","a","axios","post","push","payload","response","data","ProjectTaskItem","pt_id","this","props","deleteProjectTask","id","summary","acceptanceCriteria","to","onClick","onDeleteClick","bind","connect","window","confirm","delete","ProjectTasks","console","log","getBackLog","BoardContent","project_tasks","todoItems","inProgressItems","doneItems","length","src","tasks","map","project_task_p","key","i","status","Fragment","BoardAlgorithm","state","get","res","AddProjectTask","onChange","onSubmit","e","setState","target","name","value","preventDefault","newProjectTask","placeholder","errors","initialState","error","combineReducers","action","filter","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProjectTask","nextProps","match","params","getProjectTask","updatedTask","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.edd4af49.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand\" href=\"/\">\r\n                        ToDoList\r\n            </a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                        <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}","import axios from \"axios\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_PROJECT_TASKS,\r\n  DELETE_PROJECT_TASK,\r\n  GET_PROJECT_TASK\r\n} from \"./types\";\r\n\r\n//add task\r\nexport const addProjectTaskAction = (project_task, history) => async dispatch => {\r\n  try {\r\n  \r\n    await axios.post(\"https://projet-tasks-spring.herokuapp.com/tasks/add\", project_task);\r\n    history.push(\"/\");\r\n\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n\r\n  } catch (error) {\r\n\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\n//delete task\r\nexport const deleteProjectTask = pt_id => async dispatch => {\r\n  if (\r\n    window.confirm(\r\n      `You are deleting project task ${pt_id}, this action cannot be undone`\r\n    )\r\n  ) {\r\n    await axios.delete(`https://projet-tasks-spring.herokuapp.com/tasks/delete/${pt_id}`);\r\n    dispatch({\r\n      type: DELETE_PROJECT_TASK,\r\n      payload: pt_id\r\n    });\r\n  }\r\n};\r\n\r\n//get all tasks\r\nexport const getBackLog=()=> async dispatch =>{\r\n    const res= await axios.get(\"https://projet-tasks-spring.herokuapp.com/tasks/all\");\r\n   \r\n    dispatch({\r\n        type:GET_PROJECT_TASKS,\r\n        payload:res.data\r\n    });\r\n}\r\n\r\n//get task\r\nexport const getProjectTask = (pt_id, history) => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`https://projet-tasks-spring.herokuapp.com/tasks/${pt_id}`);\r\n    dispatch({\r\n      type: GET_PROJECT_TASK,\r\n      payload: res.data\r\n    });\r\n\r\n  } catch (error) {\r\n    history.push(\"/\");\r\n  }\r\n};","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const GET_PROJECT_TASKS=\"GET_PROJECT_TASKS\";\r\nexport const DELETE_PROJECT_TASK=\"DELETE_PROJECT_TASK\";\r\nexport const GET_PROJECT_TASK=\"GET_PROJECT_TASK\";","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\nimport { deleteProjectTask } from \"../actions/ProjectTaskActions\"\r\nclass ProjectTaskItem extends Component {\r\n  onDeleteClick(pt_id) {\r\n    this.props.deleteProjectTask(pt_id);\r\n  }\r\n  render() {\r\n    const { project_task } = this.props;\r\n    return (\r\n      <div className=\"card mb-1 bg-light\">\r\n        <div className=\"card-header text-primary\">ID: {project_task.id}</div>\r\n        <div className=\"card-body bg-light\">\r\n          <h5 className=\"card-title\">{project_task.summary}</h5>\r\n          <p className=\"card-text text-truncate \">\r\n            {project_task.acceptanceCriteria}\r\n          </p>\r\n          <Link\r\n            to={`updatetask/${project_task.id}`}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            View / Update\r\n          </Link>\r\n\r\n          <button\r\n            className=\"btn btn-danger ml-4\"\r\n            onClick={this.onDeleteClick.bind(this, project_task.id)}\r\n          >\r\n            Delete\r\n              </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectTaskItem.propTypes = {\r\n  deleteProjectTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { deleteProjectTask }\r\n)(ProjectTaskItem);","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport ProjectTaskItem from './ProjectTaskItem';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { getBackLog } from \"../actions/ProjectTaskActions\";\r\n\r\nclass ProjectTasks extends Component {\r\n  componentDidMount() {\r\n    console.log(this.props.getBackLog())\r\n  }\r\n  render() {\r\n\r\n\r\n    const { project_tasks } = this.props.project_tasks;\r\n\r\n    let BoardContent;\r\n    let todoItems = [];\r\n    let inProgressItems = [];\r\n    let doneItems = [];\r\n\r\n    const BoardAlgorithm = project_tasks => {\r\n      if (project_tasks.length < 1) {\r\n        return (\r\n          \r\n            <img src=\"loading.gif\" />\r\n                \r\n        );\r\n      } else {\r\n        const tasks = project_tasks.map(project_task_p => (\r\n          <ProjectTaskItem key={project_task_p.id} project_task={project_task_p} />\r\n        ));\r\n\r\n        for (let i = 0; i < tasks.length; i++) {\r\n          if (tasks[i].props.project_task.status === \"TO_DO\") {\r\n            todoItems.push(tasks[i]);\r\n          }\r\n\r\n          if (tasks[i].props.project_task.status === \"IN_PROGRESS\") {\r\n            inProgressItems.push(tasks[i]);\r\n          }\r\n\r\n          if (tasks[i].props.project_task.status === \"DONE\") {\r\n            doneItems.push(tasks[i]);\r\n          }\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-secondary text-white\">\r\n                      <h3>TO DO</h3>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {todoItems}\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-primary text-white\">\r\n                      <h3>In Progress</h3>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {inProgressItems}\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-success text-white\">\r\n                      <h3>Done</h3>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {doneItems}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    };\r\n\r\n    BoardContent = BoardAlgorithm(project_tasks);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to=\"/addtask\" className=\"btn btn-primary mb-3\">\r\n          <i className=\"fas fa-plus-circle\"> Create Project Task</i>\r\n        </Link>\r\n        <br />\r\n        <hr />\r\n        {BoardContent}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nProjectTasks.propTypes = {\r\n  getBackLog: PropTypes.func.isRequired,\r\n  project_tasks: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  project_tasks: state.project_task\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getBackLog }\r\n)(ProjectTasks);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addProjectTaskAction } from \"../actions/ProjectTaskActions\";\r\n\r\n\r\nclass AddProjectTask extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\"\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const newProjectTask = {\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status\r\n    };\r\n    console.log(newProjectTask);\r\n    this.props.addProjectTaskAction(newProjectTask, this.props.history);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"addProjectTask\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <Link to=\"/\" className=\"btn btn-light\">\r\n                Back to Board\r\n              </Link>\r\n              <h4 className=\"display-4 text-center\">\r\n                Add /Update Project Task\r\n              </h4>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"summary\"\r\n                    value={this.state.summary}\r\n                    placeholder=\"Project Task summary\"\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddProjectTask.propTypes = {\r\n  addProjectTaskAction: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addProjectTaskAction }\r\n)(AddProjectTask);","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = { error: \"test error\" };\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import {\r\n  GET_PROJECT_TASKS,\r\n  DELETE_PROJECT_TASK,\r\n  GET_PROJECT_TASK\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  project_tasks: [],\r\n  project_task: {}\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_PROJECT_TASKS:\r\n      return {\r\n        ...state,\r\n        project_tasks: action.payload\r\n      };\r\n\r\n    case GET_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_task: action.payload\r\n      };\r\n\r\n    case DELETE_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_tasks: state.project_tasks.filter(\r\n          project_task => project_task.id !== action.payload\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport errorsReducer from \"./errorsReducer\";\r\nimport projectTaskReducer from \"./ProjectTaskReducer\";\r\n\r\nexport default combineReducers({\r\n  errors: errorsReducer,\r\n  project_task: projectTaskReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\"; //dispatch actions\r\nimport rootReducer from \"../reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nlet store;\r\n\r\nconst ReactReduxDevTools =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\n//for google chrome users\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\r\n  store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(...middleware),\r\n      ReactReduxDevTools\r\n    )\r\n  );\r\n} else {\r\n  store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware))\r\n  );\r\n}\r\n\r\nexport default store;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { getProjectTask, addProjectTaskAction } from \"../actions/ProjectTaskActions\"\r\n\r\n\r\nclass UpdateProjectTask extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: \"\",\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\",\r\n      errors: {}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n\r\n    const { id, summary, acceptanceCriteria, status } = nextProps.project_task;\r\n\r\n    this.setState({\r\n      id,\r\n      summary,\r\n      acceptanceCriteria,\r\n      status\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { pt_id } = this.props.match.params;\r\n    this.props.getProjectTask(pt_id);\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const updatedTask = {\r\n      id: this.state.id,\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status\r\n    };\r\n\r\n    this.props.addProjectTaskAction(updatedTask, this.props.history);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"addtask\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <a href=\"/\" className=\"btn btn-light\">\r\n                Back to Board\r\n                </a>\r\n              <h4 className=\"display-4 text-center\">\r\n                Add /Update Project Task\r\n                </h4>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"summary\"\r\n                    placeholder=\"Project Task summary\"\r\n                    value={this.state.summary}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.summary && (\r\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUpdateProjectTask.propTypes = {\r\n  project_task: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n  getProjectTask: PropTypes.func.isRequired,\r\n  addProjectTaskAction: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  project_task: state.project_task.project_task,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getProjectTask, addProjectTaskAction }\r\n)(UpdateProjectTask);","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport ProjectTasks from './components/ProjectTasks';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport AddProjectTask from './components/AddProjectTask';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport UpdateProjectTask from \"./components/UpdateProjectTask\"\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <Route exact path=\"/\" component={ProjectTasks} />\n          <Route exact path=\"/addtask\" component={AddProjectTask} />\n          <Route exact path=\"/updatetask/:pt_id\" component={UpdateProjectTask}\n          />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}